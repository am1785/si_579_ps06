{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","RhymeWord.js","SavedWords.js","Finder.js","index.js"],"names":["App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RhymeWord","props","text","onClick","onSave","SavedWords","description","Finder","useState","setSavedWordCount","SAVED_WORDS","setSavedWords","DESC","setDescription","RHYME_WORDS","setRhymes","SYN_WORDS","setSynonyms","OUTPUTS","setOutputs","JSON_DATA","setJsonData","current_func","set_funct","output_elements","words_to_be_saved","searchWordInput","useRef","r_pressed","s_pressed","NoResult","rel_rhy","a","fetch","URLSearchParams","toString","response","json","data","rel_syn","makeRhymes","getRhymes","current","value","makeSyns","getSynonyms","addSavedWord","word","length","saved","push","concat","useEffect","grouped_json_data","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","result","Array","from","keys","sort","key","groupBy","Object","rhyme_word","new_desc","entries","word_elements","syn_word","onKeyDown","event","focus","ref","type","placeholder","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d123f705.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","function RhymeWord(props) {\r\n    const { text } = props;\r\n    function onSave(){\r\n        if(props.onSave){\r\n        props.onSave();\r\n        }\r\n    }\r\n    return <li>{props.text} <button onClick={onSave} className=\"btn btn-outline-success\">Save</button></li>;\r\n}\r\n\r\nexport default RhymeWord;\r\n\r\nexport function NoResult(props) {\r\n    return <li>No result.</li>;\r\n}","function SavedWords(props) {\r\n    if(props.description){\r\n        return <p>{props.description}</p>;\r\n    }\r\n}\r\n\r\nexport default SavedWords;","import {useState, useRef, useEffect, useCallback} from 'react';\r\nimport RhymeWord from './RhymeWord';\r\nimport SavedWords from './SavedWords';\r\nimport NoResult from './RhymeWord';\r\nimport React from 'react';\r\n\r\nfunction Finder(){\r\n    const [SAVED_WORDS_COUNTER, setSavedWordCount] = useState(0);\r\n    const [SAVED_WORDS, setSavedWords] = useState([]);\r\n    const [DESC, setDescription] = useState(\"\");\r\n    const [RHYME_WORDS, setRhymes] = useState({});\r\n    const [SYN_WORDS, setSynonyms] = useState([]);\r\n    const [OUTPUTS, setOutputs] = useState([]);\r\n    const [JSON_DATA, setJsonData] = useState([]);\r\n    const [current_func, set_funct] = useState(0);\r\n\r\n    const output_elements = [];\r\n    const words_to_be_saved = [];\r\n\r\n    const searchWordInput = useRef(null);\r\n    const r_pressed = useRef(null);\r\n    const s_pressed = useRef(null);\r\n\r\n    // only run this hook when the JSON_DATA field has changed\r\n\r\n    useEffect(() => {\r\n        setJsonData(JSON_DATA);\r\n        if(current_func === 0) {\r\n        let grouped_json_data = groupBy(JSON_DATA, \"numSyllables\");\r\n        setRhymes(grouped_json_data);\r\n        }\r\n        else {\r\n        setSynonyms(JSON_DATA);\r\n        }\r\n        //console.log('JSON DATA CHANGED!');\r\n    }, [JSON_DATA]);\r\n\r\n    // only run this hook when the RHYME_WORDS field has changed\r\n\r\n    useEffect(() => {\r\n        setOutputs([]);\r\n        if (RHYME_WORDS && Object.keys(RHYME_WORDS).length === 0) {\r\n            const rhyme_word = <NoResult />;\r\n            output_elements.push(<ul>{rhyme_word}</ul>);\r\n            let newOutput = output_elements;\r\n            setOutputs(newOutput);\r\n            const new_desc = `Words that rhyme with ${searchWordInput.current.value}`;\r\n            setDescription(new_desc);\r\n        }\r\n        else {\r\n            for(const [key,value] of Object.entries(RHYME_WORDS)){\r\n                const word_elements = [];\r\n                output_elements.push(<h2>{key} Syllables:</h2>);\r\n                for(const word of value){\r\n                    const rhyme_word = <RhymeWord text={word['word']} onSave= {() => addSavedWord(word['word'])} />;\r\n                    word_elements.push(rhyme_word);\r\n                }\r\n                output_elements.push(<ul>{word_elements}</ul>);\r\n            }\r\n            let newOutput = output_elements;\r\n            setOutputs(newOutput);\r\n            const new_desc = `Words that rhyme with ${searchWordInput.current.value}`;\r\n            setDescription(new_desc);\r\n        }\r\n    }, [RHYME_WORDS]);\r\n\r\n    useEffect(() => {\r\n        setOutputs([]);\r\n        if (SYN_WORDS && Object.keys(SYN_WORDS).length === 0) {\r\n            const syn_word = <NoResult />;\r\n            output_elements.push(<ul>{syn_word}</ul>);\r\n            let newOutput = output_elements;\r\n            setOutputs(newOutput);\r\n            const new_desc = `Words have similar meanings to ${searchWordInput.current.value}`;\r\n            setDescription(new_desc);\r\n        } else {\r\n        const word_elements = [];\r\n        for(const word of SYN_WORDS){\r\n            const syn_word = <RhymeWord text={word['word']} onSave= {() => addSavedWord(word['word'])} />;\r\n            word_elements.push(syn_word);\r\n        }\r\n        output_elements.push(<ul>{word_elements}</ul>);\r\n        let newOutput = output_elements;\r\n        setOutputs(newOutput);\r\n        const new_desc = `Words that have similar meanings to ${searchWordInput.current.value}`;\r\n        setDescription(new_desc);\r\n        }\r\n    }, [SYN_WORDS]);\r\n\r\n    function NoResult (props){\r\n        return <li>No Result.</li>;\r\n    }\r\n\r\n    async function getRhymes(rel_rhy) {\r\n        let response = await fetch(`https://api.datamuse.com/words?${(new URLSearchParams({rel_rhy})).toString()}`);\r\n        let json = await response.json()\r\n        .then((data) => {\r\n            return data;\r\n        })\r\n        .then((data) => {\r\n            setJsonData(data);\r\n        });\r\n    }\r\n\r\n    async function getSynonyms(rel_syn) {\r\n        let response = await fetch(`https://api.datamuse.com/words?${(new URLSearchParams({rel_syn})).toString()}`);\r\n        let json = await response.json()\r\n        .then((data) => {\r\n            return data;\r\n        })\r\n        .then((data) => {\r\n            setJsonData(data);\r\n        });\r\n    }\r\n\r\n    function groupBy(objects, property) {\r\n        // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\r\n        // value for property (obj[property])\r\n        if(typeof property !== 'function') {\r\n            const propName = property;\r\n            property = (obj) => obj[propName];\r\n        }\r\n        const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\r\n        for(const object of objects) {\r\n            const groupName = property(object);\r\n            //Make sure that the group exists\r\n            if(!groupedObjects.has(groupName)) {\r\n                groupedObjects.set(groupName, []);\r\n            }\r\n            groupedObjects.get(groupName).push(object);\r\n        }\r\n        // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\r\n        const result = {};\r\n        for(const key of Array.from(groupedObjects.keys()).sort()) {\r\n            result[key] = groupedObjects.get(key);\r\n        }\r\n        return result;\r\n    }\r\n\r\n   function makeRhymes(){\r\n        const loading_desc = \"loading...\";\r\n        setDescription(loading_desc);\r\n        getRhymes(searchWordInput.current.value);\r\n        set_funct(0);\r\n    }\r\n\r\n    function makeSyns(){\r\n        const loading_desc = \"loading...\";\r\n        setDescription(loading_desc);\r\n        getSynonyms(searchWordInput.current.value);\r\n        set_funct(1);\r\n    }\r\n\r\n    function addSavedWord(word){\r\n        if (words_to_be_saved.length === 0){\r\n            const saved = <SavedWords description={word}/>;\r\n            words_to_be_saved.push(saved.props.description);\r\n            //console.log(words_to_be_saved);\r\n            setSavedWords(SAVED_WORDS.concat(words_to_be_saved));\r\n            setSavedWordCount(words_to_be_saved.length);\r\n\r\n        } else {\r\n            const saved = <SavedWords description={', '.concat(word)} />;\r\n            words_to_be_saved.push(saved.props.description);\r\n            setSavedWords(SAVED_WORDS.concat(words_to_be_saved));\r\n            setSavedWordCount(words_to_be_saved.length);\r\n        }\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n        if(event.key === 'Enter') {\r\n            if(current_func === 0){\r\n            makeRhymes(); // add the task if the user presses enter in the input field\r\n            r_pressed.current.focus();\r\n            }\r\n            else {\r\n                s_pressed.current.focus();\r\n                makeSyns();\r\n            }\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <div className=\"row\">\r\n        <div className=\"col\">Saved words: {SAVED_WORDS} </div>\r\n        </div>\r\n        <div className=\"row\">\r\n        <div className=\"input-group col\">\r\n            <input className=\"form-control\" onKeyDown={onKeyDown} ref={searchWordInput} type=\"text\" placeholder=\"Enter a word\" id=\"word_input\" />\r\n            <button onClick={makeRhymes} id=\"show_rhymes\" type=\"button\" ref={r_pressed} className=\"btn btn-primary\">Show rhyming words</button>\r\n            <button onClick={makeSyns} id=\"show_synonyms\" type=\"button\" ref={s_pressed} className=\"btn btn-secondary\">Show synonyms</button>\r\n        </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <h2 className=\"col\" id=\"output_description\">{DESC}</h2>\r\n        </div>\r\n        <div className=\"output row\">\r\n                <output id = \"word_output\" className=\"col\">\r\n                    {OUTPUTS}\r\n                </output>\r\n        </div>\r\n        </>\r\n}\r\n\r\nexport default Finder;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Finder from './Finder.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nReactDOM.render(<><main className=\"container\">\n  <h1 className=\"row\">Rhyme Finder (SI579 PS06)</h1>\n  <h3>Link to Repository: <a href=\"https://github.com/am1785/si_579_ps06\">https://github.com/am1785/si_579_ps06</a></h3>\n  <Finder />\n  </main></>, document.getElementById('root'));"],"sourceRoot":""}